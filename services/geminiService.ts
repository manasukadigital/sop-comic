import { GoogleGenAI, Type, GenerateContentResponse } from "@google/genai";
import { ComicPanelData } from '../types';

let ai: GoogleGenAI | null = null;

export function initializeAi(apiKey: string) {
  if (!apiKey) {
    throw new Error("A valid API Key is required to initialize the AI service.");
  }
  ai = new GoogleGenAI({ apiKey });
}

const panelSchema = {
  type: Type.OBJECT,
  properties: {
    step: {
      type: Type.INTEGER,
      description: "Nomor langkah, dimulai dari 1.",
    },
    narration: {
      type: Type.STRING,
      description: "Narasi orang ketiga yang ringkas tentang tindakan yang dilakukan. HARUS dalam Bahasa Indonesia.",
    },
    workerDialog: {
      type: Type.STRING,
      description: "Dialog orang pertama untuk pekerja, memberikan tips santai. HARUS dalam Bahasa Indonesia.",
    },
    characterDialog: {
      type: Type.STRING,
      description: "Dialog singkat, motivasi, atau peringatan dari maskot robot yang ramah. HARUS dalam Bahasa Indonesia.",
    },
    visualPrompt: {
      type: Type.STRING,
      description: "Prompt detail untuk generator gambar AI untuk membuat panel komik. Sertakan adegan, pekerja, aksi, latar belakang, dan gaya (misalnya, 'digital art, comic book style, bold outlines, vibrant colors'). HARUS dalam Bahasa Inggris.",
    },
  },
  required: ["step", "narration", "workerDialog", "characterDialog", "visualPrompt"],
};

export async function analyzeSop(sopText: string, companyName: string): Promise<ComicPanelData[]> {
  if (!ai) {
    throw new Error("AI service is not initialized. Please provide an API key first.");
  }

  const prompt = `
    Anda adalah seorang ahli dalam desain instruksional dan pembuatan buku komik. Tugas Anda adalah mengubah teks standar operasional prosedur (SOP) dari "${companyName}" menjadi serangkaian panel komik yang menarik.

    Analisis teks tersebut dan bagi menjadi urutan langkah-langkah yang logis. Untuk setiap langkah, buat objek JSON sesuai dengan skema yang disediakan. Setiap objek harus mendeskripsikan satu panel komik. 
    PENTING: Teks untuk 'narration', 'workerDialog', dan 'characterDialog' HARUS dalam Bahasa Indonesia. 'visualPrompt' harus tetap dalam Bahasa Inggris untuk model generator gambar.

    Berikut adalah Teks SOP:
    ---
    ${sopText}
    ---

    Kembalikan sebuah array JSON dari objek-objek ini.
  `;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.ARRAY,
          items: panelSchema,
        },
      },
    });

    const jsonText = response.text.trim();
    const data = JSON.parse(jsonText);
    return data as ComicPanelData[];
  } catch (error: any) {
    console.error("Error analyzing SOP with Gemini:", error);
    const errorString = String(error.message || error);
    if (errorString.includes('RESOURCE_EXHAUSTED') || errorString.includes('quota')) {
      throw new Error("API quota exceeded during analysis. Please check your plan and billing details, or try again later.");
    }
    if (errorString.includes('API key not valid')) {
        throw new Error("The provided API key is not valid. Please check the key and try again.");
    }
    throw new Error("Failed to analyze the SOP document. Please check the document content and try again.");
  }
}

export async function generateImagePanel(prompt: string): Promise<string> {
    if (!ai) {
        throw new Error("AI service is not initialized. Please provide an API key first.");
    }

    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error: any) {
        console.error("Error generating image with Gemini:", error);
        const errorString = String(error.message || error);
        if (errorString.includes('RESOURCE_EXHAUSTED') || errorString.includes('quota')) {
            throw new Error("API quota exceeded. Please check your plan and billing details, or try again later.");
        }
        if (errorString.includes('API key not valid')) {
            throw new Error("The provided API key is not valid. Please check the key and try again.");
        }
        throw new Error("Failed to generate the comic panel image. The service might be temporarily unavailable or the prompt could be rejected.");
    }
}